***************
*** 26,37 ****
  /** gmon.out file header */ 
  struct gmonhdr 
  { 
          int lpc;        /* lowest pc address */ 
          int hpc;        /* highest pc address */ 
          int ncnt;       /* size of samples + size of header */ 
-         int version;    /* version number */ 
          int profrate;   /* profiling clock rate */ 
-         int resv[3];    /* reserved */ 
  }; 
   
  /** frompc -> selfpc graph */ 
--- 26,44 ----
  /** gmon.out file header */ 
  struct gmonhdr 
  { 
+         char cookie[4]; 
+         char version[4]; 
+         char spare[3*4]; 
+ }; 
+  
+ struct gmonhisthdr 
+ { 
          int lpc;        /* lowest pc address */ 
          int hpc;        /* highest pc address */ 
          int ncnt;       /* size of samples + size of header */ 
          int profrate;   /* profiling clock rate */ 
+         char dimension[15]; 
+         char abbrev; 
  }; 
   
  /** frompc -> selfpc graph */ 
***************
*** 55,61 ****
          struct rawarc *arcs; 
   
          int nsamples; 
-         unsigned int *samples; 
   
          int timer; 
           
--- 62,68 ----
          struct rawarc *arcs; 
   
          int nsamples; 
+         unsigned short int *samples; 
   
          int timer; 
           
***************
*** 110,116 ****
          } 
   
          gp.nsamples = (gp.textsize + gp.hashfraction - 1) / gp.hashfraction; 
-         gp.samples = (unsigned int *)malloc(sizeof(unsigned int) * gp.nsamples); 
          if (gp.samples == NULL) 
          { 
                  free(gp.arcs); 
--- 117,123 ----
          } 
   
          gp.nsamples = (gp.textsize + gp.hashfraction - 1) / gp.hashfraction; 
+         gp.samples = (unsigned short int *)malloc(sizeof(unsigned short int) * gp.nsamples); 
          if (gp.samples == NULL) 
          { 
                  free(gp.arcs); 
***************
*** 120,126 ****
          } 
   
          memset((void *)gp.arcs, '\0', gp.narcs * (sizeof(struct rawarc))); 
-         memset((void *)gp.samples, '\0', gp.nsamples * (sizeof(unsigned int ))); 
   
          gp.timer = sceKernelCreateVTimer("gprof timer", NULL); 
   
--- 127,133 ----
          } 
   
          memset((void *)gp.arcs, '\0', gp.narcs * (sizeof(struct rawarc))); 
+         memset((void *)gp.samples, '\0', gp.nsamples * (sizeof(unsigned short int ))); 
   
          gp.timer = sceKernelCreateVTimer("gprof timer", NULL); 
   
***************
*** 161,166 ****
          FILE *fp; 
          int i; 
          struct gmonhdr hdr; 
   
          if (gp.state != GMON_PROF_ON) 
          { 
--- 168,174 ----
          FILE *fp; 
          int i; 
          struct gmonhdr hdr; 
+         struct gmonhisthdr histhdr; 
   
          if (gp.state != GMON_PROF_ON) 
          { 
***************
*** 174,194 ****
          sceKernelStopVTimer(gp.timer); 
   
          fp = fopen("gmon.out", "wb"); 
-         hdr.lpc = gp.lowpc; 
-         hdr.hpc = gp.highpc; 
-         hdr.ncnt = sizeof(hdr) + (sizeof(unsigned int) * gp.nsamples); 
-         hdr.version = GMONVERSION; 
-         hdr.profrate = SAMPLE_FREQ; 
-         hdr.resv[0] = 0; 
-         hdr.resv[1] = 0; 
-         hdr.resv[2] = 0; 
          fwrite(&hdr, 1, sizeof(hdr), fp); 
-         fwrite(gp.samples, gp.nsamples, sizeof(unsigned int), fp); 
   
          for (i=0; i<gp.narcs; i++) 
          { 
                  if (gp.arcs[i].count > 0) 
                  { 
                          fwrite(gp.arcs + i, sizeof(struct rawarc), 1, fp); 
                  } 
          } 
--- 182,210 ----
          sceKernelStopVTimer(gp.timer); 
   
          fp = fopen("gmon.out", "wb"); 
+  
+         memset(&hdr, 0x00, sizeof(hdr)); 
+         memcpy(hdr.cookie, "gmon", 4); 
+         hdr.version[0]=1; 
          fwrite(&hdr, 1, sizeof(hdr), fp); 
+  
+         fputc(0x00, fp);    /* GMON_TAG_TIME_HIST */ 
+         memset(&histhdr, 0x00, sizeof(histhdr)); 
+         histhdr.lpc = gp.lowpc - gp.lowpc; 
+         histhdr.hpc = gp.highpc - gp.lowpc; 
+         histhdr.ncnt = gp.nsamples; 
+         histhdr.profrate = SAMPLE_FREQ; 
+         strcpy(histhdr.dimension, "seconds"); 
+         histhdr.abbrev = 's'; 
+         fwrite(&histhdr, 1, sizeof(histhdr), fp); 
+         fwrite(gp.samples, gp.nsamples, sizeof(unsigned short int), fp); 
+  
   
          for (i=0; i<gp.narcs; i++) 
          { 
                  if (gp.arcs[i].count > 0) 
                  { 
+                         fputc(0x01, fp);    /* GMON_TAG_CG_ARC */ 
                          fwrite(gp.arcs + i, sizeof(struct rawarc), 1, fp); 
                  } 
          } 
***************
*** 230,237 ****
                  gp.pc = selfpc; 
                  e = (frompc - gp.lowpc) / gp.hashfraction; 
                  arc = gp.arcs + e; 
-                 arc->frompc = frompc; 
-                 arc->selfpc = selfpc; 
                  arc->count++; 
          } 
  }
--- 246,253 ----
                  gp.pc = selfpc; 
                  e = (frompc - gp.lowpc) / gp.hashfraction; 
                  arc = gp.arcs + e; 
+                 arc->frompc = frompc - gp.lowpc; 
+                 arc->selfpc = selfpc - gp.lowpc; 
                  arc->count++; 
          } 
  }
